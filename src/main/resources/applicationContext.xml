<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="http://www.springframework.org/schema/beans" xmlns:aop="http://www.springframework.org/schema/aop"
  xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
  xmlns:cache="http://www.springframework.org/schema/cache" xmlns:p="http://www.springframework.org/schema/p"
  xsi:schemaLocation="http://www.springframework.org/schema/beans 
     http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
     http://www.springframework.org/schema/aop
     http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
     http://www.springframework.org/schema/context
     http://www.springframework.org/schema/context/spring-context-4.0.xsd
     http://www.springframework.org/schema/tx
     http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
     http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-4.0.xsd">

    <!-- 读取配置文件 -->
    <context:property-placeholder location="classpath:db.properties"/>

     <!-- 连接池-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          destroy-method="close">
        <property name="url" value="jdbc:mysql://localhost/data_analyze?characterEncoding=utf-8" />
        <property name="username" value="root" />
        <property name="password" value="root" />
        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
        <property name="maxActive" value="10" />
        <property name="minIdle" value="5" />
    </bean>


     <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
         <!-- dataSource要指定用到的连接池 -->
         <property name="dataSource" ref="dataSource"/>
         <!-- configLocation指定mybatis核心配置文件路径 -->
         <property name="configLocation" value="classpath:mybatis/myBatisConfig.xml"/>
     </bean>

    <!-- 事务管理 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <!--事务配置-->
    <tx:advice id="advice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="insert*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="update*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="*" propagation="SUPPORTS"/>
        </tx:attributes>
    </tx:advice>

    <!--切入配置 ..表示每个模块的包名 -->
    <aop:config>
        <aop:advisor advice-ref="advice" pointcut="execution(* com.data_analyze.*.service.impl.*.*(..))"/>
    </aop:config>

    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"/>
    </bean>

    <!-- 自动扫描组件，要把controller去除，它是在spring-mvc.xml中配置，如果不去除会影响事务管理。 -->
    <!--扫描com.cxspace下所有类,但是不扫Controller-->

    <context:component-scan base-package="com.data_analyze">
        <context:exclude-filter type="annotation"
                                expression="org.springframework.stereotype.Controller" />
    </context:component-scan>

    <!-- 配置 转换器，对于在basePackage设置的包（包括子包）下的接口类，
    如果接口类的全类名在Mapper.xml文件中和定义过命名空间一致，
     将被转换成spring的BEAN，在调用
        的地方通过@Autowired方式将可以注入接口实例 -->

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
        <property name="basePackage" value="com.data_analyze.*.dao" />
    </bean>

</beans>